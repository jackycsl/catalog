// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CatalogHTTPServer interface {
	HealthCheck(context.Context, *HealthReq) (*HealthReply, error)
}

func RegisterCatalogHTTPServer(s *http.Server, srv CatalogHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/catalog/health", _Catalog_HealthCheck0_HTTP_Handler(srv))
}

func _Catalog_HealthCheck0_HTTP_Handler(srv CatalogHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/catalog.service.v1.Catalog/HealthCheck")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*HealthReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthReply)
		return ctx.Result(200, reply)
	}
}

type CatalogHTTPClient interface {
	HealthCheck(ctx context.Context, req *HealthReq, opts ...http.CallOption) (rsp *HealthReply, err error)
}

type CatalogHTTPClientImpl struct {
	cc *http.Client
}

func NewCatalogHTTPClient(client *http.Client) CatalogHTTPClient {
	return &CatalogHTTPClientImpl{client}
}

func (c *CatalogHTTPClientImpl) HealthCheck(ctx context.Context, in *HealthReq, opts ...http.CallOption) (*HealthReply, error) {
	var out HealthReply
	pattern := "/v1/catalog/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/catalog.service.v1.Catalog/HealthCheck"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
