// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ShopInterfaceHTTPServer interface {
	GetGame(context.Context, *GetGameReq) (*GetGameReply, error)
	ListGame(context.Context, *ListGameReq) (*ListGameReply, error)
}

func RegisterShopInterfaceHTTPServer(s *http.Server, srv ShopInterfaceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/catalog/Games", _ShopInterface_ListGame0_HTTP_Handler(srv))
	r.GET("/v1/catalog/Games/{id}", _ShopInterface_GetGame0_HTTP_Handler(srv))
}

func _ShopInterface_ListGame0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.interface.v1.ShopInterface/ListGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGame(ctx, req.(*ListGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameReply)
		return ctx.Result(200, reply)
	}
}

func _ShopInterface_GetGame0_HTTP_Handler(srv ShopInterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.interface.v1.ShopInterface/GetGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGame(ctx, req.(*GetGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameReply)
		return ctx.Result(200, reply)
	}
}

type ShopInterfaceHTTPClient interface {
	GetGame(ctx context.Context, req *GetGameReq, opts ...http.CallOption) (rsp *GetGameReply, err error)
	ListGame(ctx context.Context, req *ListGameReq, opts ...http.CallOption) (rsp *ListGameReply, err error)
}

type ShopInterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewShopInterfaceHTTPClient(client *http.Client) ShopInterfaceHTTPClient {
	return &ShopInterfaceHTTPClientImpl{client}
}

func (c *ShopInterfaceHTTPClientImpl) GetGame(ctx context.Context, in *GetGameReq, opts ...http.CallOption) (*GetGameReply, error) {
	var out GetGameReply
	pattern := "/v1/catalog/Games/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.interface.v1.ShopInterface/GetGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopInterfaceHTTPClientImpl) ListGame(ctx context.Context, in *ListGameReq, opts ...http.CallOption) (*ListGameReply, error) {
	var out ListGameReply
	pattern := "/v1/catalog/Games"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.interface.v1.ShopInterface/ListGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
