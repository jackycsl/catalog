// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ShopAdminHTTPServer interface {
	CreateGame(context.Context, *CreateGameReq) (*CreateGameReply, error)
	DeleteGame(context.Context, *DeleteGameReq) (*DeleteGameReply, error)
	GetGame(context.Context, *GetGameReq) (*GetGameReply, error)
	ListGame(context.Context, *ListGameReq) (*ListGameReply, error)
	UpdateGame(context.Context, *UpdateGameReq) (*UpdateGameReply, error)
}

func RegisterShopAdminHTTPServer(s *http.Server, srv ShopAdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/catalog/games", _ShopAdmin_ListGame1_HTTP_Handler(srv))
	r.POST("/admin/v1/catalog/games", _ShopAdmin_CreateGame0_HTTP_Handler(srv))
	r.PUT("/admin/v1/catalog/games/{id}", _ShopAdmin_UpdateGame0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/catalog/games/{id}", _ShopAdmin_DeleteGame0_HTTP_Handler(srv))
	r.GET("/admin/v1/catalog/games/{id}", _ShopAdmin_GetGame1_HTTP_Handler(srv))
}

func _ShopAdmin_ListGame1_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/ListGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGame(ctx, req.(*ListGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateGame0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGameReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/CreateGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGame(ctx, req.(*CreateGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGameReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateGame0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGameReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/UpdateGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGame(ctx, req.(*UpdateGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGameReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteGame0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/DeleteGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGame(ctx, req.(*DeleteGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGameReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetGame1_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/GetGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGame(ctx, req.(*GetGameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameReply)
		return ctx.Result(200, reply)
	}
}

type ShopAdminHTTPClient interface {
	CreateGame(ctx context.Context, req *CreateGameReq, opts ...http.CallOption) (rsp *CreateGameReply, err error)
	DeleteGame(ctx context.Context, req *DeleteGameReq, opts ...http.CallOption) (rsp *DeleteGameReply, err error)
	GetGame(ctx context.Context, req *GetGameReq, opts ...http.CallOption) (rsp *GetGameReply, err error)
	ListGame(ctx context.Context, req *ListGameReq, opts ...http.CallOption) (rsp *ListGameReply, err error)
	UpdateGame(ctx context.Context, req *UpdateGameReq, opts ...http.CallOption) (rsp *UpdateGameReply, err error)
}

type ShopAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewShopAdminHTTPClient(client *http.Client) ShopAdminHTTPClient {
	return &ShopAdminHTTPClientImpl{client}
}

func (c *ShopAdminHTTPClientImpl) CreateGame(ctx context.Context, in *CreateGameReq, opts ...http.CallOption) (*CreateGameReply, error) {
	var out CreateGameReply
	pattern := "/admin/v1/catalog/games"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/CreateGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteGame(ctx context.Context, in *DeleteGameReq, opts ...http.CallOption) (*DeleteGameReply, error) {
	var out DeleteGameReply
	pattern := "/admin/v1/catalog/games/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/DeleteGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetGame(ctx context.Context, in *GetGameReq, opts ...http.CallOption) (*GetGameReply, error) {
	var out GetGameReply
	pattern := "/admin/v1/catalog/games/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/GetGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListGame(ctx context.Context, in *ListGameReq, opts ...http.CallOption) (*ListGameReply, error) {
	var out ListGameReply
	pattern := "/admin/v1/catalog/games"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/ListGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateGame(ctx context.Context, in *UpdateGameReq, opts ...http.CallOption) (*UpdateGameReply, error) {
	var out UpdateGameReply
	pattern := "/admin/v1/catalog/games/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/UpdateGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
